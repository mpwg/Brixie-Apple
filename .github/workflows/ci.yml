name: CI

permissions:
  contents: read

on:
  push:
    branches: [main, docs/*]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Code Quality (SwiftLint)
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Install SwiftLint
        run: brew install swiftlint

      - name: Run SwiftLint
        run: make lint

  build:
    name: Build - ${{ matrix.platform }}
    runs-on: macos-latest
    strategy:
      matrix:
        platform: [iOS, macOS]
        include:
          - platform: iOS
            make_target: build-ios
          - platform: macOS
            make_target: build-macos
    environment: IntegrationTests
    env:
      REBRICKABLE_API_KEY: ${{ secrets.REBRICKABLE_API_KEY }}
    steps:

      - name: Cache
        uses: actions/cache@v4
        with:
          # A list of files, directories, and wildcard patterns to cache and restore
           path: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/
          # An explicit key for restoring and saving the cache
           key: /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/version.plist
          # An ordered multiline string listing the prefix-matched keys, that are used for restoring stale cache if no cache hit occurred for key. Note `cache-hit` returns false in this case.
          # restore-keys: # optional
          # The chunk size used to split up large files during upload, in bytes
          # upload-chunk-size: # optional
          # An optional boolean when enabled, allows windows runners to save or restore caches that can be restored or saved respectively on other platforms
          # enableCrossOsArchive: # optional, default is false
          # Fail the workflow if cache entry is not found
          # fail-on-cache-miss: # optional, default is false
          # Check if a cache entry exists for the given input(s) (key, restore-keys) without downloading the cache
          # lookup-only: # optional, default is false
          # Run the post step to save the cache even if another step before fails
          # save-always: # optional, default is false
      
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest

      - name: install iOS
        run: |
          xcodebuild -downloadPlatform iOS -exportPath

      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Show Build Environment
        run: |
          echo "üîç Build Environment Info:"
          echo "Platform: ${{ matrix.platform }}"
          echo "Xcode Version: $(xcodebuild -version)"
          echo "Available SDKs:"; xcodebuild -showsdks || true
          echo "Make Target: ${{ matrix.make_target }}"
          if [ -n "$REBRICKABLE_API_KEY" ]; then
            echo "‚úÖ API Key: Present"
          else
            echo "‚ùå API Key: Missing"
          fi
          echo ""

      - name: Build App (CI unified)
        run: |
          echo "üî® Building with Makefile (ci-build)..."
          make ci-build

  test:
    name: Test - ${{ matrix.platform }}
    runs-on: macos-latest
    strategy:
      matrix:
        platform: [iOS, macOS]
        include:
          - platform: iOS
            make_target: test-ios
            destination: 'platform=iOS Simulator,name=iPhone 15'
          - platform: macOS
            make_target: test-macos
            destination: 'platform=macOS,variant=Mac Catalyst'
    environment: IntegrationTests
    env:
      REBRICKABLE_API_KEY: ${{ secrets.REBRICKABLE_API_KEY }}
    needs: build
    steps:
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest

      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            ~/Library/Developer/Xcode/DerivedData/**/SourcePackages
            ~/Library/Caches/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Run Tests
        run: |
          echo "üß™ Running ${{ matrix.platform }} tests with Makefile..."
          make ${{ matrix.make_target }}
