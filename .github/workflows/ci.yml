name: CI

permissions:
  contents: read

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    name: Code Quality (SwiftLint)
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Install SwiftLint
        run: brew install swiftlint

      - name: Run SwiftLint
        run: swiftlint lint --strict

  build:
    name: Build - ${{ matrix.platform }}
    runs-on: macos-latest
    strategy:
      matrix:
        platform: [iOS, macOS]
        include:
          - platform: iOS
            destination: "generic/platform=iOS"
          - platform: macOS
            destination: "generic/platform=macOS,variant=Mac Catalyst"
    environment: IntegrationTests
    env:
      REBRICKABLE_API_KEY: ${{ secrets.REBRICKABLE_API_KEY }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Setup Xcode
        id: setup-xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest

      - name: Install xcpretty
        run: gem install xcpretty

      - name: create cache directory
        run: mkdir -p "${{ runner.temp }}/xcode-downloads"

      - name: Cache Xcode iOS Platform
        id: cache-xcode-platform
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/xcode-downloads
          key: xcode-platform-${{ matrix.platform }}-${{ runner.os }}

      - name: Install iOS Platform
        run: |
          xcodebuild -downloadPlatform iOS -exportPath "${{ runner.temp }}/xcode-downloads"

      - name: Show Build Environment
        run: |
          echo "🔍 Build Environment Info:"
          echo "Platform: ${{ matrix.platform }}"
          echo "Xcode Version: $(xcodebuild -version)"
          echo "Available SDKs:"; xcodebuild -showsdks || true
          echo "Destination: ${{ matrix.destination }}"
          if [ -n "$REBRICKABLE_API_KEY" ]; then
            echo "✅ API Key: Present"
          else
            echo "❌ API Key: Missing"
          fi
          echo ""

      - name: Generate API Configuration
        run: |
          echo "🔧 Generating API configuration..."
          ./Scripts/generate-api-config.sh

      - name: Build App
        run: |
          echo "🔨 Building ${{ matrix.platform }} app..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          set -o pipefail
          xcodebuild -project Brixie.xcodeproj \
                     -scheme Brixie \
                     -configuration Debug \
                     -destination "${{ matrix.destination }}" \
                     build \
                     CODE_SIGNING_ALLOWED=NO \
                     -quiet \
                     | xcpretty --color --simple

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ ${{ matrix.platform }} build completed successfully!"

  test:
    name: Test - ${{ matrix.platform }}
    runs-on: macos-latest
    strategy:
      matrix:
        platform: [iOS, macOS]
        include:
          - platform: iOS
            destination: "platform=iOS Simulator,name=iPhone 15"
          - platform: macOS
            destination: "platform=macOS,variant=Mac Catalyst"
    environment: IntegrationTests
    env:
      REBRICKABLE_API_KEY: ${{ secrets.REBRICKABLE_API_KEY }}
    needs: build
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Setup Xcode
        id: setup-xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest

      - name: Install xcpretty
        run: gem install xcpretty

      - name: create cache directory
        run: mkdir -p "${{ runner.temp }}/xcode-downloads"

      - name: Cache Xcode iOS Platform
        id: cache-xcode-platform
        uses: actions/cache@v4
        with:
          path: ${{ runner.temp }}/xcode-downloads
          key: xcode-platform-${{ matrix.platform }}-${{ runner.os }}

      - name: Install iOS Platform
        run: |
          xcodebuild -downloadPlatform iOS -exportPath "${{ runner.temp }}/xcode-downloads"

      - name: Generate API Configuration
        run: |
          echo "🔧 Generating API configuration..."
          ./Scripts/generate-api-config.sh

      - name: Run Tests
        run: |
          echo "🧪 Running ${{ matrix.platform }} tests..."
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

          set -o pipefail
          xcodebuild test \
                     -project Brixie.xcodeproj \
                     -scheme Brixie \
                     -destination "${{ matrix.destination }}" \
                     CODE_SIGNING_ALLOWED=NO \
                     -quiet \
                     | xcpretty --color --test

          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "✅ ${{ matrix.platform }} tests completed successfully!"
