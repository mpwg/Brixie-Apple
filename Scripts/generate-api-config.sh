#!/bin/bash

# Generate API configuration script
# This script handles API key injection at build time for the Brixie iOS/macOS app

PROJECT_DIR="$(pwd)"
CONFIG_DIR="$PROJECT_DIR/Brixie/Configuration/Generated"
OUTPUT_FILE="$CONFIG_DIR/GeneratedConfiguration.swift"

# Create configuration directory if it doesn't exist
mkdir -p "$CONFIG_DIR"

echo "🔧 Generating API configuration..."

# Remove any stray/legacy generated file to avoid Xcode duplicate-output issues
rm -f "$PROJECT_DIR/Brixie/Configuration/GeneratedConfiguration.swift" 2>/dev/null || true

# Load environment from .env file if it exists
if [ -f "$PROJECT_DIR/.env" ]; then
    echo "📁 Loading environment from .env file..."
    set -a
    source "$PROJECT_DIR/.env"
    set +a
fi

if [ -n "$REBRICKABLE_API_KEY" ]; then
    echo "🔐 Generating build configuration with embedded API key..."
    tmpfile="$OUTPUT_FILE.tmp"
    printf '// GENERATED FILE - DO NOT EDIT
// This file is automatically generated during build time
// Generated on: %s

import Foundation

struct GeneratedConfiguration {
    static let rebrickableAPIKey: String? = "%s"
    static let hasEmbeddedAPIKey = true
    static let buildDate = "%s"
}
' "$(date -u +"%Y-%m-%d %H:%M:%S UTC")" "$REBRICKABLE_API_KEY" "$(date -u +"%Y-%m-%d %H:%M:%S UTC")" > "$tmpfile" && mv "$tmpfile" "$OUTPUT_FILE"
    echo "✅ API configuration generated successfully with embedded key"
else
    echo "❌ REBRICKABLE_API_KEY environment variable is required but not found"
    echo ""
    echo "To fix this:"
    echo "  1. Set environment variable: export REBRICKABLE_API_KEY=\"your_key_here\""
    echo "  2. Use inline: REBRICKABLE_API_KEY=\"your_key\" ./Scripts/generate-api-config.sh"
    echo "  3. Create .env file: echo \"REBRICKABLE_API_KEY=your_key\" > .env"
    echo ""
    echo "Get your API key from: https://rebrickable.com/api/"
    exit 1
fi

echo "📁 Generated file: $OUTPUT_FILE"
echo "🚀 Ready for build!"