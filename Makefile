# Makefile for Brixie API Configuration Generation
# This Makefile handles API key injection at build time for the Brixie iOS/macOS app

# Project configuration
PROJECT_DIR := $(shell pwd)
CONFIG_DIR := $(PROJECT_DIR)/Brixie/Configuration/Generated
OUTPUT_FILE := $(CONFIG_DIR)/GeneratedConfiguration.swift

# Build configuration
XCODE_PROJECT := Brixie.xcodeproj
SCHEME := Brixie

# Default target
.PHONY: all
all: generate-config

# Create configuration directory if it doesn't exist
$(CONFIG_DIR):
	@mkdir -p $(CONFIG_DIR)

# Generate API configuration (requires API key)
.PHONY: generate-config
generate-config: $(CONFIG_DIR)
	@echo "🔧 Generating API configuration..."
	# Remove any stray/legacy generated file to avoid Xcode duplicate-output issues
	@rm -f $(PROJECT_DIR)/Brixie/Configuration/GeneratedConfiguration.swift || true
	@if [ -f "$(PROJECT_DIR)/.env" ]; then \
		echo "📁 Loading environment from .env file..."; \
		. $(PROJECT_DIR)/.env; \
	fi; \
	if [ -n "$$REBRICKABLE_API_KEY" ]; then \
		echo "🔐 Generating build configuration with embedded API key..."; \
		tmpfile="$(OUTPUT_FILE).tmp"; \
		printf '// GENERATED FILE - DO NOT EDIT\n// This file is automatically generated during build time\n// Generated on: %s\n\nimport Foundation\n\nstruct GeneratedConfiguration {\n    static let rebrickableAPIKey: String? = "%s"\n    static let hasEmbeddedAPIKey = true\n    static let buildDate = "%s"\n}\n' "$$(date -u +"%Y-%m-%d %H:%M:%S UTC")" "$$REBRICKABLE_API_KEY" "$$(date -u +"%Y-%m-%d %H:%M:%S UTC")" > "$$tmpfile" && mv "$$tmpfile" $(OUTPUT_FILE); \
		echo "✅ API configuration generated successfully with embedded key"; \
	else \
		echo "❌ REBRICKABLE_API_KEY environment variable is required but not found"; \
		echo ""; \
		echo "To fix this:"; \
		echo "  1. Set environment variable: export REBRICKABLE_API_KEY=\"your_key_here\""; \
		echo "  2. Use inline: REBRICKABLE_API_KEY=\"your_key\" make build-ios"; \
		echo "  3. Create .env file: echo \"REBRICKABLE_API_KEY=your_key\" > .env"; \
		echo ""; \
		echo "Get your API key from: https://rebrickable.com/api/"; \
		exit 1; \
	fi
	@echo "📁 Generated file: $(OUTPUT_FILE)"
	@echo "🚀 Ready for build!"

# Generate API configuration without key (for development/testing only)
.PHONY: generate-config-dev
generate-config-dev: $(CONFIG_DIR)
	@echo "🔧 Generating development API configuration (no key)..."
	@echo "⚠️  WARNING: This generates a config WITHOUT an API key - for development only"
	# Remove any stray/legacy generated file to avoid Xcode duplicate-output issues
	@rm -f $(PROJECT_DIR)/Brixie/Configuration/GeneratedConfiguration.swift || true
	@tmpfile="$(OUTPUT_FILE).tmp"; printf '// GENERATED FILE - DO NOT EDIT\n// This file is automatically generated during build time\n// Generated on: %s\n\nimport Foundation\n\nstruct GeneratedConfiguration {\n    static let rebrickableAPIKey: String? = nil\n    static let hasEmbeddedAPIKey = false\n    static let buildDate = "%s"\n}\n' "$$(date -u +"%Y-%m-%d %H:%M:%S UTC")" "$$(date -u +"%Y-%m-%d %H:%M:%S UTC")" > "$$tmpfile" && mv "$$tmpfile" $(OUTPUT_FILE)
	@echo "⚠️  API configuration generated without embedded key"
	@echo "📁 Generated file: $(OUTPUT_FILE)"

# Clean generated files
.PHONY: clean-config
clean-config:
	@echo "🧹 Cleaning generated configuration files..."
	@rm -f $(OUTPUT_FILE)
	@rm -f $(PROJECT_DIR)/Brixie/Configuration/GeneratedConfiguration.swift || true
	@echo "✅ Cleaned generated files"

# Build iOS app
.PHONY: build-ios
build-ios: generate-config
	@echo "📱 Building iOS app..."
	xcodebuild -project $(XCODE_PROJECT) -scheme $(SCHEME) -configuration Debug -destination 'platform=iOS Simulator,name=iPhone 16' build

# Build macOS app
.PHONY: build-macos
build-macos: generate-config
	@echo "💻 Building macOS app..."
	xcodebuild -project $(XCODE_PROJECT) -scheme $(SCHEME) -configuration Debug -destination 'platform=macOS,variant=Mac Catalyst' build

# Build both platforms
.PHONY: build-all
build-all: build-ios build-macos

# CI-friendly build: use generic destinations so CI can build without a simulator
.PHONY: ci-build
ci-build: generate-config
	@echo "🔁 CI build: generic iOS and macOS"
	# Build for generic iOS device (no simulator) if iOS 26.0 SDK is available
	@sh -c '\
	if xcodebuild -showsdks 2>/dev/null | grep -q "iOS 26.0"; then \
		echo "📱 iOS 26.0 SDK found — building iOS target..."; \
		xcodebuild -project $(XCODE_PROJECT) -scheme $(SCHEME) -configuration Debug -destination "generic/platform=iOS" build || exit $$?; \
	else \
		echo "⚠️  iOS 26.0 SDK not installed on runner — skipping iOS build"; \
	fi'
	# Build for generic macOS (macOS app) if any macOS SDK is available
	@sh -c '\
	if xcodebuild -showsdks 2>/dev/null | grep -qi "macOS"; then \
		echo "💻 macOS SDK found — building macOS target..."; \
		xcodebuild -project $(XCODE_PROJECT) -scheme $(SCHEME) -configuration Debug -destination "generic/platform=macOS" build || exit $$?; \
	else \
		echo "⚠️  macOS SDK not found on runner — skipping macOS build"; \
	fi'

# Test iOS app
.PHONY: test-ios
test-ios: generate-config
	@echo "🧪 Testing iOS app..."
	xcodebuild test -project $(XCODE_PROJECT) -scheme $(SCHEME) -destination 'platform=iOS Simulator,name=iPhone 16'

# Test macOS app
.PHONY: test-macos
test-macos: generate-config
	@echo "🧪 Testing macOS app..."
	xcodebuild test -project $(XCODE_PROJECT) -scheme $(SCHEME) -destination 'platform=macOS,variant=Mac Catalyst'

# Run all tests
.PHONY: test-all
test-all: test-ios test-macos

# Clean build artifacts
.PHONY: clean-build
clean-build:
	@echo "🧹 Cleaning build artifacts..."
	xcodebuild -project $(XCODE_PROJECT) -scheme $(SCHEME) clean
	@echo "✅ Build artifacts cleaned"

# Full clean (config + build)
.PHONY: clean
clean: clean-config clean-build

# Help target
.PHONY: help
help:
	@echo "Brixie Build System"
	@echo "==================="
	@echo ""
	@echo "Configuration:"
	@echo "  generate-config      Generate API configuration (REQUIRES API key)"
	@echo "  generate-config-dev  Generate config without API key (development only)"
	@echo "  clean-config         Remove generated configuration files"
	@echo ""
	@echo "Building:"
	@echo "  build-ios        Build iOS app (REQUIRES API key)"
	@echo "  build-macos      Build macOS app (REQUIRES API key)"
	@echo "  build-all        Build both iOS and macOS apps (REQUIRES API key)"
	@echo ""
	@echo "Testing:"
	@echo "  test-ios         Run iOS tests (REQUIRES API key)"
	@echo "  test-macos       Run macOS tests (REQUIRES API key)"
	@echo "  test-all         Run all tests (REQUIRES API key)"
	@echo ""
	@echo "Maintenance:"
	@echo "  clean-build      Clean Xcode build artifacts"
	@echo "  clean            Full clean (config + build artifacts)"
	@echo "  help             Show this help message"
	@echo ""
	@echo "Environment Variables:"
	@echo "  REBRICKABLE_API_KEY  API key for Rebrickable service (REQUIRED)"
	@echo ""
	@echo "API Key Setup:"
	@echo "  Get your key from: https://rebrickable.com/api/"
	@echo "  Method 1: export REBRICKABLE_API_KEY=\"your_key_here\""
	@echo "  Method 2: echo \"REBRICKABLE_API_KEY=your_key\" > .env"
	@echo "  Method 3: REBRICKABLE_API_KEY=\"your_key\" make build-ios"
	@echo ""
	@echo "Usage Examples:"
	@echo "  REBRICKABLE_API_KEY=\"key123\" make generate-config  # Generate with key"
	@echo "  REBRICKABLE_API_KEY=\"key123\" make build-ios        # Build with key"
	@echo "  make generate-config-dev                            # Dev config (no key)"
	@echo "  make clean && make test-all                         # Clean build & test"

# Default help if no target specified
.DEFAULT_GOAL := help